{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"vLite.js The new smallest Javascript video library vLite.js is a fast and lightweight Javascript library to customize and skin native HTML5 video and Youtube video. Only 5Kb on production with Gzip, vLite.js has no dependency with any framework or library and is write in Javascript native . vanillaJS This module is fully writen in Javascript native. No need to import an additional librairy like jQuery. #YouMightNotNeedJquery Github npm vLite is available on his Github page If you like the project, like it on Github please :) Star vLite is available as the vlitejs package on npm Browser support The project is fully compatible with the most popular web browser. More information about the HTML5 video support here . Chrome Firefox Safari (iOS and OS X) Opera IE 9+ Edge HTML and CSS files are valid W3C Licence Available with the MIT licence . Contributor Contributor Many thanks to Maxime LEROUGE for its contribution. ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Overview"},{"location":"#vlitejs","text":"","title":"vLite.js"},{"location":"#the-new-smallest-javascript-video-library","text":"vLite.js is a fast and lightweight Javascript library to customize and skin native HTML5 video and Youtube video. Only 5Kb on production with Gzip, vLite.js has no dependency with any framework or library and is write in Javascript native . vanillaJS This module is fully writen in Javascript native. No need to import an additional librairy like jQuery. #YouMightNotNeedJquery","title":"The new smallest Javascript video library"},{"location":"#github-npm","text":"vLite is available on his Github page If you like the project, like it on Github please :) Star vLite is available as the vlitejs package on npm","title":"Github &amp; npm"},{"location":"#browser-support","text":"The project is fully compatible with the most popular web browser. More information about the HTML5 video support here . Chrome Firefox Safari (iOS and OS X) Opera IE 9+ Edge HTML and CSS files are valid W3C","title":"Browser support"},{"location":"#licence","text":"Available with the MIT licence .","title":"Licence"},{"location":"#contributor","text":"Contributor Many thanks to Maxime LEROUGE for its contribution. ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Contributor"},{"location":"available-methods/","text":"Each players instanciation return the instance in parameter of the callback function when the player is ready (Youtube and HTML5). There are available methods to easily manipulate the player. Play The play() function trigger a play event to the video. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { player . play (); } }); Pause The pause() function trigger a pause event to the video. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { player . pause (); } }); Seek to The seekTo() function change the current time of the video. The function accept one parameter, the time in seconds. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { player . seekTo ( 20 ); } }); Get the current time The getCurrentTime() function return the current time of the video in seconds. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { var currentTime = player . getCurrentTime (); } }); Get the duration The getDuration() function return the duration of the video in seconds. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { var duration = player . getDuration (); } }); Get the instance The getInstance() function return the instance of the video. With HTML5 native video, the function return the video element. With Youtube video, the function return the instance of Youtube API for the current player. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { var instance = player . getInstance (); } }); Request fullscreen The requestFullscreen() function request the native fullscreen event for the brower. The function must be called on user event (click for example) to prevent error on touch devices that requires user action. Youtube fullscreen API \u2714 By default, Youtube do not make available fullscreen in their API, but vLite do it for you. Thanks to vLite framework, the native fullscreen API is available with Youtube and HTML5 video player. 1 2 3 4 5 6 7 8 9 10 var button = document . querySelector ( .button ); var player = new vLite ({ selector : #player-1 , callback : ( player ) = { button . addEventListener ( click , function ( e ){ e . preventDefault (); player . requestFullscreen (); }); } }); Exit fullscreen The exitFullscreen() function request the native exit of the fullscreen event of the browser. The function must be called on user event (click for example). Youtube fullscreen API \u2714 Also available with the Youtube video player. 1 2 3 4 5 6 7 8 9 10 var button = document . querySelector ( .button ); var player = new vLite ({ selector : #player-1 , callback : ( player ) = { button . addEventListener ( click , function ( e ){ e . preventDefault (); player . exitFullscreen (); }); } }); Destroy The destroy() function trigger a destroy event to remove all created events and instance (HTML5 video and Youtube video) of the current video player. Optimized for your application \u2714 Each Javascript framework should make available a destroy method to clean all events, variables and HTML created by himself when the user requests it. vLite has its own destroy method which destroy everything that's necessary for each specific video player. 1 2 3 4 5 6 7 8 9 10 var button = document . querySelector ( .button ); var player = new vLite ({ selector : #player-1 , callback : ( player ) = { buton . addEventListener ( click , function ( e ){ e . preventDefault (); player . destroy (); }); } }); ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Available methods"},{"location":"available-methods/#play","text":"The play() function trigger a play event to the video. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { player . play (); } });","title":"Play"},{"location":"available-methods/#pause","text":"The pause() function trigger a pause event to the video. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { player . pause (); } });","title":"Pause"},{"location":"available-methods/#seek-to","text":"The seekTo() function change the current time of the video. The function accept one parameter, the time in seconds. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { player . seekTo ( 20 ); } });","title":"Seek to"},{"location":"available-methods/#get-the-current-time","text":"The getCurrentTime() function return the current time of the video in seconds. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { var currentTime = player . getCurrentTime (); } });","title":"Get the current time"},{"location":"available-methods/#get-the-duration","text":"The getDuration() function return the duration of the video in seconds. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { var duration = player . getDuration (); } });","title":"Get the duration"},{"location":"available-methods/#get-the-instance","text":"The getInstance() function return the instance of the video. With HTML5 native video, the function return the video element. With Youtube video, the function return the instance of Youtube API for the current player. 1 2 3 4 5 6 var player = new vLite ({ selector : #player-1 , callback : ( player ) = { var instance = player . getInstance (); } });","title":"Get the instance"},{"location":"available-methods/#request-fullscreen","text":"The requestFullscreen() function request the native fullscreen event for the brower. The function must be called on user event (click for example) to prevent error on touch devices that requires user action. Youtube fullscreen API \u2714 By default, Youtube do not make available fullscreen in their API, but vLite do it for you. Thanks to vLite framework, the native fullscreen API is available with Youtube and HTML5 video player. 1 2 3 4 5 6 7 8 9 10 var button = document . querySelector ( .button ); var player = new vLite ({ selector : #player-1 , callback : ( player ) = { button . addEventListener ( click , function ( e ){ e . preventDefault (); player . requestFullscreen (); }); } });","title":"Request fullscreen"},{"location":"available-methods/#exit-fullscreen","text":"The exitFullscreen() function request the native exit of the fullscreen event of the browser. The function must be called on user event (click for example). Youtube fullscreen API \u2714 Also available with the Youtube video player. 1 2 3 4 5 6 7 8 9 10 var button = document . querySelector ( .button ); var player = new vLite ({ selector : #player-1 , callback : ( player ) = { button . addEventListener ( click , function ( e ){ e . preventDefault (); player . exitFullscreen (); }); } });","title":"Exit fullscreen"},{"location":"available-methods/#destroy","text":"The destroy() function trigger a destroy event to remove all created events and instance (HTML5 video and Youtube video) of the current video player. Optimized for your application \u2714 Each Javascript framework should make available a destroy method to clean all events, variables and HTML created by himself when the user requests it. vLite has its own destroy method which destroy everything that's necessary for each specific video player. 1 2 3 4 5 6 7 8 9 10 var button = document . querySelector ( .button ); var player = new vLite ({ selector : #player-1 , callback : ( player ) = { buton . addEventListener ( click , function ( e ){ e . preventDefault (); player . destroy (); }); } }); ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Destroy"},{"location":"demo/","text":"","title":"Demo"},{"location":"download/","text":"vLitejs is available as the vlitejs package on npm and Github . ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Download"},{"location":"getting-started/","text":"Installation The project contains HTML example, CSS files for minimalist design, font files for SVG icons and Javascript files for the library. All Javascripts and CSS files are available minified and unminified version. Install vlitejs with NPM or includes files manually in your project. NPM 1 npm install vlitejs Direct tag include Simply download and include with a script tag. vLitejs will be registered as a global variable. Don't use the minified version during development. You will miss out on all the nice warnings for common mistakes! Javascripts The vLite Javascripts files are available in the ./js folder, it contains three files with each their unminified version. Include the file of your choice in your HTML, before your application. 1 script src = js/vlite-html5+youtube.min.js / script CSS CSS files to customize the player and controls are available in the ./css folder, import it directly in your project. Styles includes a small reset CSS from Eric Meyer . 1 link rel = stylesheet href = css/vlite.min.css / Font All icons are managed in SVG for more quality and are automatically included in a small font in the /fonts folder. There are two files vlite.woff and vlite.woff2 for browser support. Add them in your project in a folder /fonts . If necessary, change the path to the font in the CSS file. Versions Include the file of your choice in your application: For Youtube video player vlite-youtube.min.js vlite-youtube.js For native HTML5 video player vlite-html5.min.js vlite-html5.js For native HTML5 video and Youtube video player vlite-html5+youtube.min.js vlite-html5+youtube.js ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Getting started"},{"location":"getting-started/#installation","text":"The project contains HTML example, CSS files for minimalist design, font files for SVG icons and Javascript files for the library. All Javascripts and CSS files are available minified and unminified version. Install vlitejs with NPM or includes files manually in your project.","title":"Installation"},{"location":"getting-started/#npm","text":"1 npm install vlitejs","title":"NPM"},{"location":"getting-started/#direct-tag-include","text":"Simply download and include with a script tag. vLitejs will be registered as a global variable. Don't use the minified version during development. You will miss out on all the nice warnings for common mistakes!","title":"Direct tag include"},{"location":"getting-started/#javascripts","text":"The vLite Javascripts files are available in the ./js folder, it contains three files with each their unminified version. Include the file of your choice in your HTML, before your application. 1 script src = js/vlite-html5+youtube.min.js / script","title":"Javascripts"},{"location":"getting-started/#css","text":"CSS files to customize the player and controls are available in the ./css folder, import it directly in your project. Styles includes a small reset CSS from Eric Meyer . 1 link rel = stylesheet href = css/vlite.min.css /","title":"CSS"},{"location":"getting-started/#font","text":"All icons are managed in SVG for more quality and are automatically included in a small font in the /fonts folder. There are two files vlite.woff and vlite.woff2 for browser support. Add them in your project in a folder /fonts . If necessary, change the path to the font in the CSS file.","title":"Font"},{"location":"getting-started/#versions","text":"Include the file of your choice in your application: For Youtube video player vlite-youtube.min.js vlite-youtube.js For native HTML5 video player vlite-html5.min.js vlite-html5.js For native HTML5 video and Youtube video player vlite-html5+youtube.min.js vlite-html5+youtube.js ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Versions"},{"location":"how-it-works/","text":"HTML structure vLitejs use native HTML5 video tag. The syntax is the same between native HTML5 video and Youtube video, with the only difference that for Youtube, there is a data attribute data-youtube-id with the Youtube video ID. Replace just {{idSelector}} with a unique id and {{idYoutube}} with the identifiant of the Youtube video. HTML For information, each video players must have inevitably a unique id in data attribute. HTML5 video 1 2 3 video id = {{idSelector}} class = vlite-js / video Youtube video 1 2 3 4 video id = {{idSelector}} class = vlite-js data-youtube-id = {{idYoutube}} / video Options Each players has its own object of options. By default, vLite use default value of these options like the list below. For more flexibility, vLite accepts two possibilities for passed them. Options in the HTML Object of options must be a valid JSON and write between single quote in data attribute data-options . Option in the Javascript constructor Object of options passed to the constructor like the example below. One or the other Don't pass options in the HTML in adition to the constructor. If you choose to do it, there will be a conflict , and the priority will be given to options pass by the data attribute data-options in the HTML ! The list Example below list all options with default value, change them according to your needs for each video players. 1 2 3 4 5 6 7 8 9 10 11 12 13 { autoplay : false , // {Bool} controls : true , // {Bool} playPause : true , // {Bool} time : true , // {Bool} timeline : true , // {Bool} volume : true , // {Bool} fullscreen : true , // {Bool} poster : null , // Must be a {String} bigPlay : true , // {Bool} autoHide : false , // {Bool} nativeControlsForTouch : false // {Bool} } autoplay - Autoplay video controls - Show control bar with the controls enabled playPause - Show the play/pause button on the control bar time - Show the time information on the control bar timeline - Show the timeline on the control bar volume - Show thevolume button on the control bar fullscreen - Show the fullscreen button on the control bar poster - Show the poster on the video bigPlay - Show the big play button on the video autoHide - Auto hide the control bar if the user is inactive nativeControlsForTouch - Keep native controls for touch devices Instanciation Instanciation of native HTML5 video and Youtube video is the same. The difference is made by the presence of the data attribute data-youtube-id . vLite class accept an object parameter with three keys: selector - Selector of the video element (mandatory) options - Object of options (optional) callback - Callback function (optional) Selector The selector can be a string with unique identifier or a HTML element with document.querySelector('#player-1') for example. Simple example with options in HTML The simplest way to use vLite is like the example below. Default options are used and passed in the HTML. The poster was overrided with the correct path. 1 2 3 4 video id = {{idSelector}} class = vlite-js data-options = { poster : img/poster.jpg } / video 1 2 3 var player = new vLite ({ selector : #player-1 }); Example with the callback function and options in the constructor The callback function is called when the current player is instanciated and ready. The function return the current class to manipulate the player. See below for available methods. 1 2 3 video id = {{idSelector}} class = vlite-js / video 1 2 3 4 5 6 7 8 9 var player = new vLite ({ selector : #player-1 , options : { poster : img/poster.jpg }, callback : ( player ) = { //Ready } }); Example with all options in the constructor The example below allow you to override all options by the constructor. If necessary, these options can also be passed by the data attribute data-options in the HTML. 1 2 3 video id = {{idSelector}} class = vlite-js / video 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var player = new vLite ({ selector : #player-1 , options : { autoplay : false , controls : true , playPause : true , time : true , timeline : true , volume : true , fullscreen : true , poster : img/poster.jpg , bigPlay : true , autoHide : false , nativeControlsForTouch : true }, callback : ( player ) = { //Ready } }); Load Youtube API Youtube API is automatically loaded with vlite-youtube.js . All players are instanciate when the API is ready with a queuing system. ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"How it works"},{"location":"how-it-works/#html-structure","text":"vLitejs use native HTML5 video tag. The syntax is the same between native HTML5 video and Youtube video, with the only difference that for Youtube, there is a data attribute data-youtube-id with the Youtube video ID. Replace just {{idSelector}} with a unique id and {{idYoutube}} with the identifiant of the Youtube video. HTML For information, each video players must have inevitably a unique id in data attribute.","title":"HTML structure"},{"location":"how-it-works/#html5-video","text":"1 2 3 video id = {{idSelector}} class = vlite-js / video","title":"HTML5 video"},{"location":"how-it-works/#youtube-video","text":"1 2 3 4 video id = {{idSelector}} class = vlite-js data-youtube-id = {{idYoutube}} / video","title":"Youtube video"},{"location":"how-it-works/#options","text":"Each players has its own object of options. By default, vLite use default value of these options like the list below. For more flexibility, vLite accepts two possibilities for passed them.","title":"Options"},{"location":"how-it-works/#options-in-the-html","text":"Object of options must be a valid JSON and write between single quote in data attribute data-options .","title":"Options in the HTML"},{"location":"how-it-works/#option-in-the-javascript-constructor","text":"Object of options passed to the constructor like the example below. One or the other Don't pass options in the HTML in adition to the constructor. If you choose to do it, there will be a conflict , and the priority will be given to options pass by the data attribute data-options in the HTML !","title":"Option in the Javascript constructor"},{"location":"how-it-works/#the-list","text":"Example below list all options with default value, change them according to your needs for each video players. 1 2 3 4 5 6 7 8 9 10 11 12 13 { autoplay : false , // {Bool} controls : true , // {Bool} playPause : true , // {Bool} time : true , // {Bool} timeline : true , // {Bool} volume : true , // {Bool} fullscreen : true , // {Bool} poster : null , // Must be a {String} bigPlay : true , // {Bool} autoHide : false , // {Bool} nativeControlsForTouch : false // {Bool} } autoplay - Autoplay video controls - Show control bar with the controls enabled playPause - Show the play/pause button on the control bar time - Show the time information on the control bar timeline - Show the timeline on the control bar volume - Show thevolume button on the control bar fullscreen - Show the fullscreen button on the control bar poster - Show the poster on the video bigPlay - Show the big play button on the video autoHide - Auto hide the control bar if the user is inactive nativeControlsForTouch - Keep native controls for touch devices","title":"The list"},{"location":"how-it-works/#instanciation","text":"Instanciation of native HTML5 video and Youtube video is the same. The difference is made by the presence of the data attribute data-youtube-id . vLite class accept an object parameter with three keys: selector - Selector of the video element (mandatory) options - Object of options (optional) callback - Callback function (optional) Selector The selector can be a string with unique identifier or a HTML element with document.querySelector('#player-1') for example.","title":"Instanciation"},{"location":"how-it-works/#simple-example-with-options-in-html","text":"The simplest way to use vLite is like the example below. Default options are used and passed in the HTML. The poster was overrided with the correct path. 1 2 3 4 video id = {{idSelector}} class = vlite-js data-options = { poster : img/poster.jpg } / video 1 2 3 var player = new vLite ({ selector : #player-1 });","title":"Simple example with options in HTML"},{"location":"how-it-works/#example-with-the-callback-function-and-options-in-the-constructor","text":"The callback function is called when the current player is instanciated and ready. The function return the current class to manipulate the player. See below for available methods. 1 2 3 video id = {{idSelector}} class = vlite-js / video 1 2 3 4 5 6 7 8 9 var player = new vLite ({ selector : #player-1 , options : { poster : img/poster.jpg }, callback : ( player ) = { //Ready } });","title":"Example with the callback function and options in the constructor"},{"location":"how-it-works/#example-with-all-options-in-the-constructor","text":"The example below allow you to override all options by the constructor. If necessary, these options can also be passed by the data attribute data-options in the HTML. 1 2 3 video id = {{idSelector}} class = vlite-js / video 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var player = new vLite ({ selector : #player-1 , options : { autoplay : false , controls : true , playPause : true , time : true , timeline : true , volume : true , fullscreen : true , poster : img/poster.jpg , bigPlay : true , autoHide : false , nativeControlsForTouch : true }, callback : ( player ) = { //Ready } });","title":"Example with all options in the constructor"},{"location":"how-it-works/#load-youtube-api","text":"Youtube API is automatically loaded with vlite-youtube.js . All players are instanciate when the API is ready with a queuing system. ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Load Youtube API"},{"location":"releases-notes/","text":"Release notes Changelog 2.0.1 | February 02, 2019 Add playsinline support Add fast-forward when user click on the left/right area on the video (+ or - 10s) only on no touch devices Optimize unBindEvents function Fix native control for touch bug 2.0.0 | December 16, 2018 Add prefix .vl- before all CSS classes use by vLite to prevent conflicts Add keyboard shortcut (spacebar) to control the video Add option autoHide to hide the control bar if the user is inactive Add loader linked to seeking and seeked events 1.1.2 | December 16, 2018 Add progress bar hover and transition Prevent click catch by Youtube iframe which block vLite click fullscreen option on Youtube player can be use with nativeControlsForTouch option 1.1.1 | April 28, 2018 Add UMD (Universal Module Definition) compatibility Add package vlitejs on npm 1.1.0 | April 21, 2018 Add Javascript Promise for check if the video HTML5 is ready Add nativeControlsForTouch to keep native controls on touch devices Possibility to add options for the video by the DOM with the data attribute data-options or by the constructor. The priority will be given to options pass by the data attribute data-options in the DOM. 1.0.0 | December 11, 2017 Initial release ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"Releases notes"},{"location":"releases-notes/#release-notes","text":"","title":"Release notes"},{"location":"releases-notes/#changelog","text":"","title":"Changelog"},{"location":"releases-notes/#201-february-02-2019","text":"Add playsinline support Add fast-forward when user click on the left/right area on the video (+ or - 10s) only on no touch devices Optimize unBindEvents function Fix native control for touch bug","title":"2.0.1 | February 02, 2019"},{"location":"releases-notes/#200-december-16-2018","text":"Add prefix .vl- before all CSS classes use by vLite to prevent conflicts Add keyboard shortcut (spacebar) to control the video Add option autoHide to hide the control bar if the user is inactive Add loader linked to seeking and seeked events","title":"2.0.0 | December 16, 2018"},{"location":"releases-notes/#112-december-16-2018","text":"Add progress bar hover and transition Prevent click catch by Youtube iframe which block vLite click fullscreen option on Youtube player can be use with nativeControlsForTouch option","title":"1.1.2 | December 16, 2018"},{"location":"releases-notes/#111-april-28-2018","text":"Add UMD (Universal Module Definition) compatibility Add package vlitejs on npm","title":"1.1.1 | April 28, 2018"},{"location":"releases-notes/#110-april-21-2018","text":"Add Javascript Promise for check if the video HTML5 is ready Add nativeControlsForTouch to keep native controls on touch devices Possibility to add options for the video by the DOM with the data attribute data-options or by the constructor. The priority will be given to options pass by the data attribute data-options in the DOM.","title":"1.1.0 | April 21, 2018"},{"location":"releases-notes/#100-december-11-2017","text":"Initial release ((window.gitter = {}).chat = {}).options = { room: 'vlitejs/vlitejs' };","title":"1.0.0 | December 11, 2017"}]}