(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["vLite"] = factory();
	else
		root["vLite"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/vlite.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/css/vlite.css":
/*!***************************!*\
  !*** ./src/css/vlite.css ***!
  \***************************/
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack://vLite/./src/css/vlite.css?");

/***/ }),

/***/ "./src/js/player-html5.js":
/*!********************************!*\
  !*** ./src/js/player-html5.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/js/player.js\");\n\n\nclass PlayerHtml5 extends _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor({\n    selector,\n    options,\n    callback\n  }) {\n    //Init Player class\n    super({\n      selector: selector,\n      options: options,\n      callback: callback\n    }); //Create Promise to check when the video is ready\n\n    this.waitUntilVideoIsReady().then(this.onPlayerReady.bind(this));\n\n    if (!this.skinDisabled) {\n      this.bindSpecificEvents();\n    }\n  }\n\n  onPlayerReady() {\n    super.playerIsReady();\n    this.updateDuration();\n  }\n\n  waitUntilVideoIsReady() {\n    return new Promise((resolve, reject) => {\n      //Check if the video is ready\n      if (typeof this.player.duration === \"number\" && isNaN(this.player.duration) === false) {\n        resolve();\n      } else {\n        this.onDurationChange = () => {\n          this.player.removeEventListener('durationchange', this.onDurationChange);\n          this.player.removeEventListener('error', this.onError);\n          resolve();\n        };\n\n        this.onError = error => {\n          this.player.removeEventListener('error', this.onError);\n          this.player.removeEventListener('durationchange', this.onDurationChange);\n          reject(error);\n        }; //Listen error or durationchange events to detect when the video is ready\n\n\n        this.player.addEventListener('durationchange', this.onDurationChange, false);\n        this.player.addEventListener('error', this.onError, false);\n      }\n    });\n  }\n\n  bindSpecificEvents() {\n    if (this.options.controls) {\n      if (this.options.time) {\n        //On durationchange event, update duration if value is different\n        this.player.addEventListener('durationchange', e => this.updateDuration(e), false);\n      } //On timeupdate event, update currentTime displaying in the control bar and the width of the progress bar\n\n\n      this.player.addEventListener('timeupdate', e => this.updateCurrentTime(e), false);\n    } //On ended event, show poster and reset timeline and time\n\n\n    this.player.addEventListener('ended', e => this.onVideoEnded(e), false);\n\n    this.onPlayingEvent = () => {\n      this.onPlaying();\n    };\n\n    this.player.addEventListener('playing', e => this.onPlayingEvent(e), false);\n\n    this.onWaitingEvent = () => {\n      this.onWaiting();\n    };\n\n    this.player.addEventListener('waiting', e => this.onWaitingEvent(e), false);\n\n    this.onSeekingEvent = () => {\n      this.onSeeking();\n    };\n\n    this.player.addEventListener('seeking', e => this.onSeekingEvent(e), false);\n\n    this.onSeekedEvent = () => {\n      this.onSeeked();\n    };\n\n    this.player.addEventListener('seeked', e => this.onSeekedEvent(e), false);\n  }\n\n  getInstance() {\n    return this.player;\n  }\n\n  getCurrentTime() {\n    return this.player.currentTime;\n  }\n\n  setCurrentTime(newTime) {\n    this.player.currentTime = newTime;\n  }\n\n  getDuration() {\n    return this.player.duration;\n  }\n\n  onProgressChanged(e) {\n    this.setCurrentTime(e.target.value * this.getDuration() / 100);\n  }\n\n  methodPlay() {\n    this.player.play();\n  }\n\n  methodPause() {\n    this.player.pause();\n  }\n\n  methodMute() {\n    this.player.muted = true;\n  }\n\n  methodUnMute() {\n    this.player.muted = false;\n  }\n\n  onWaiting() {\n    this.loading(true);\n  }\n\n  onPlaying() {\n    this.loading(false);\n  }\n\n  onSeeking() {\n    this.loading(true);\n  }\n\n  onSeeked() {\n    this.loading(false);\n  }\n\n  unBindSpecificEvents() {\n    if (this.options.time) {\n      this.player.removeEventListener('durationchange', this.updateDuration);\n    }\n\n    this.player.removeEventListener('timeupdate', this.updateCurrentTime);\n    this.player.removeEventListener('playing', this.onPlaying);\n    this.player.removeEventListener('waiting', this.onWaiting);\n    this.player.removeEventListener('seeking', this.onSeeking);\n    this.player.removeEventListener('seeked', this.onSeeked);\n    this.player.removeEventListener('ended', this.onVideoEnded);\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PlayerHtml5);\n\n//# sourceURL=webpack://vLite/./src/js/player-html5.js?");

/***/ }),

/***/ "./src/js/player-youtube.js":
/*!**********************************!*\
  !*** ./src/js/player-youtube.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/js/player.js\");\n\n\nclass PlayerYoutube extends _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor({\n    selector,\n    options,\n    callback\n  }) {\n    //Init Player class\n    super({\n      selector: selector,\n      options: options,\n      callback: callback\n    }); //Init Youtube player with API\n\n    this.initYoutubePlayer();\n  }\n\n  initYoutubePlayer() {\n    this.instancePlayer = new YT.Player(this.player.getAttribute('id'), {\n      videoId: this.player.getAttribute('data-youtube-id'),\n      height: '100%',\n      width: '100%',\n      playerVars: {\n        'showinfo': 0,\n        'modestbranding': 0,\n        'autohide': 1,\n        'rel': 0,\n        'fs': this.options.fullscreen ? 1 : 0,\n        'wmode': 'transparent',\n        'playsinline': this.options.playsinline ? 1 : 0,\n        'controls': this.skinDisabled ? 1 : 0\n      },\n      events: {\n        'onReady': data => this.onPlayerReady(data),\n        'onStateChange': state => this.onPlayerStateChange(state)\n      }\n    });\n  }\n\n  onPlayerReady(data) {\n    this.player = data.target.getIframe();\n    super.playerIsReady();\n  }\n\n  getInstance() {\n    return this.instancePlayer;\n  }\n\n  onPlayerStateChange(e) {\n    switch (e.data) {\n      case YT.PlayerState.UNSTARTED:\n        if (this.options.controls && this.options.time) {\n          super.updateDuration();\n        }\n\n        break;\n\n      case YT.PlayerState.ENDED:\n        super.onVideoEnded();\n        break;\n\n      case YT.PlayerState.PLAYING:\n        this.loading(false);\n\n        if (this.options.controls) {\n          setInterval(() => {\n            super.updateCurrentTime();\n          }, 100);\n        }\n\n        super.afterPlayPause('play');\n        break;\n\n      case YT.PlayerState.PAUSED:\n        super.afterPlayPause('pause');\n        break;\n\n      case YT.PlayerState.BUFFERING:\n        this.loading(true);\n        break;\n    }\n  }\n\n  setCurrentTime(newTime) {\n    this.instancePlayer.seekTo(newTime);\n  }\n\n  getCurrentTime() {\n    return this.instancePlayer.getCurrentTime();\n  }\n\n  getDuration() {\n    return this.instancePlayer.getDuration();\n  }\n\n  onProgressChanged(e) {\n    this.setCurrentTime(e.target.value * this.getDuration() / 100);\n  }\n\n  methodPlay() {\n    this.instancePlayer.playVideo();\n  }\n\n  methodPause() {\n    this.instancePlayer.pauseVideo();\n  }\n\n  methodMute() {\n    this.instancePlayer.mute();\n  }\n\n  methodUnMute() {\n    this.instancePlayer.unMute();\n  }\n\n  removeInstance() {\n    this.instancePlayer.destroy();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PlayerYoutube);\n\n//# sourceURL=webpack://vLite/./src/js/player-youtube.js?");

/***/ }),

/***/ "./src/js/player.js":
/*!**************************!*\
  !*** ./src/js/player.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst DELAY_AUTO_HIDE = 3000;\n\nclass Player {\n  constructor({\n    selector,\n    options,\n    callback\n  }) {\n    this.callback = callback;\n    this.isFullScreen = false;\n    this.isPaused = null;\n    this.player = selector;\n    this.touchSupport = 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch ? true : false;\n    this.skinDisabled = false;\n    let customOptions = {};\n    const DEFAULT_OPTIONS = {\n      autoplay: false,\n      controls: true,\n      playPause: true,\n      timeline: true,\n      time: true,\n      volume: true,\n      fullscreen: true,\n      poster: null,\n      bigPlay: true,\n      autoHide: false,\n      nativeControlsForTouch: false,\n      playsinline: true\n    }; //Check if options have gone through DOM with data attribute\n\n    if (this.player.hasAttribute('data-options')) {\n      //Check if there is a conflict with the constructor options\n      if (options !== undefined) {\n        console.warn(`[vLite] - Option passed in \"${selector}\" by data attribute is priority over object in constructor.`);\n      }\n\n      customOptions = JSON.parse(this.player.getAttribute('data-options'));\n    } else {\n      //No conflict, we can use options in the constructor\n      customOptions = options;\n    }\n\n    this.options = this.constructor.extend(true, DEFAULT_OPTIONS, customOptions);\n\n    if (this.options.nativeControlsForTouch) {\n      this.skinDisabled = true;\n      this.player.setAttribute('controls', 'controls');\n      this.options.controls = false;\n    }\n\n    if (this.options.playsinline) {\n      this.player.setAttribute('playsinline', true);\n      this.player.setAttribute('webkit-playsinline', true);\n    } //Check fullscreen support API on different browsers and cached prefixs\n\n\n    this.supportFullScreen = this.constructor.checkSupportFullScreen();\n    this.buildPlayer();\n    this.bindEvents();\n  }\n\n  buildPlayer() {\n    //Wrap player\n    let wrapper = document.createElement('div');\n    wrapper.setAttribute('class', 'vl-wrapper-vlite vl-first-start vl-paused vl-loading');\n    wrapper.setAttribute('tabindex', 0);\n    this.player.parentNode.insertBefore(wrapper, this.player);\n    wrapper.appendChild(this.player);\n    this.wrapperPlayer = this.player.parentNode;\n    this.player.classList.add('vl-toggle-play-pause-js');\n\n    if (this.skinDisabled) {\n      this.wrapperPlayer.classList.add('vl-force-controls');\n    }\n\n    let cssstylePoster = this.options.poster !== null ? `background-image: url(${this.options.poster});` : '';\n    let htmlControls = `${!this.options.nativeControlsForTouch ? `<div class=\"vl-overlay-video vl-toggle-play-pause-js\">\n                                    ${!this.touchSupport ? `<div class=\"vl-overlay-left vl-fast-forward-js\" data-direction=\"left\"></div>\n                                        <div class=\"vl-overlay-right vl-fast-forward-js\" data-direction=\"right\"></div>` : ``}\n                                </div>` : ``}\n                            <div class=\"vl-wrapper-loader\">\n                                <div class=\"vl-loader\">\n                                    <div class=\"vl-loader-bounce-1\"></div>\n                                    <div class=\"vl-loader-bounce-2\"></div>\n                                    <div class=\"vl-loader-bounce-3\"></div>\n                                </div>\n                            </div>\n                            <div class=\"vl-poster vl-toggle-play-pause-js vl-active\" style=\"${cssstylePoster}\"></div>\n                            ${this.options.bigPlay ? `<div class=\"vl-big-play-button vl-toggle-play-pause-js\">\n                                     <span class=\"vl-player-icon vl-icon-play2\"></span>\n                                </div>` : ``}\n                            ${this.options.controls ? `<div class=\"vl-control-bar\">\n                                    ${this.options.timeline ? `<div class=\"vl-progress-bar\">\n                                            <div class=\"vl-progress-seek\"></div>\n                                            <input type=\"range\" class=\"vl-progress-input\" min=\"0\" max=\"100\" step=\"0.01\" value=\"0\" orient=\"horizontal\" />\n                                        </div>` : ``}\n                                    <div class=\"vl-control-bar-inner\">\n                                        ${this.options.playPause ? `<div class=\"vl-play-pause-button vl-toggle-play-pause-js\">\n                                                <span class=\"vl-player-icon vl-icon-play3\"></span>\n                                                <span class=\"vl-player-icon vl-icon-pause2\"></span>\n                                            </div>` : ``}\n                                        ${this.options.time ? `<div class=\"vl-time\">\n                                                <span class=\"vl-current-time\">00:00</span>&nbsp;/&nbsp;<span class=\"vl-duration\"></span>\n                                            </div>` : ``}\n                                        ${this.options.volume ? `<div class=\"vl-volume\">\n                                                <span class=\"vl-player-icon vl-icon-volume-high\"></span>\n                                                <span class=\"vl-player-icon vl-icon-volume-mute\"></span>\n                                            </div>` : ``}\n                                        ${this.options.fullscreen ? `<div class=\"vl-fullscreen\">\n                                                <span class=\"vl-player-icon vl-icon-fullscreen\"></span>\n                                                <span class=\"vl-player-icon vl-icon-shrink\"></span>\n                                            </div>` : ``}\n                                    </div>\n                                </div>` : ``}`;\n    wrapper.insertAdjacentHTML('beforeend', htmlControls);\n  }\n\n  bindEvents() {\n    if (this.options.controls && this.options.timeline) {\n      //Create progress bar event listener\n      this.onChangeProgressBar = e => {\n        this.onProgressChanged(e);\n      };\n\n      this.wrapperPlayer.querySelector('.vl-progress-input').addEventListener('change', this.onChangeProgressBar, false);\n    } //Create play/pause button event listener\n\n\n    this.onClickTogglePlayPause = e => {\n      e.preventDefault();\n      this.togglePlayPause();\n    };\n\n    [].forEach.call(this.wrapperPlayer.querySelectorAll('.vl-toggle-play-pause-js'), button => {\n      button.addEventListener('click', this.onClickTogglePlayPause, false);\n    }); //Create double click to fast-forward video current time (only on desktop, mobile doesn't support event)\n\n    if (!this.touchSupport) {\n      this.onDblclickFastForward = e => {\n        e.preventDefault();\n        this.fastForward(e);\n      };\n\n      [].forEach.call(this.wrapperPlayer.querySelectorAll('.vl-fast-forward-js'), button => {\n        button.addEventListener('dblclick', this.onDblclickFastForward, false);\n      });\n    }\n\n    if (this.options.controls && this.options.volume) {\n      //Create volume button event listener\n      this.onCLickToggleVolume = e => {\n        e.preventDefault();\n        this.toggleVolume();\n      };\n\n      this.wrapperPlayer.querySelector('.vl-volume').addEventListener('click', this.onCLickToggleVolume, false);\n    }\n\n    if (this.options.controls && this.options.fullscreen) {\n      //Create fullscreen button event listener\n      this.onClickToggleFullscreen = e => {\n        e.preventDefault();\n        this.toggleFullscreen();\n      };\n\n      this.wrapperPlayer.querySelector('.vl-fullscreen').addEventListener('click', this.onClickToggleFullscreen, false); //Create double click event to trigger fullscreen change\n\n      this.onDblclickVideo = e => {\n        e.preventDefault(); //Prevent double click to fast-forward video current time\n\n        if (e.target.classList.contains('vl-fast-forward-js')) return;\n        this.toggleFullscreen();\n      };\n\n      this.wrapperPlayer.querySelector('.vl-overlay-video').addEventListener('dblclick', this.onDblclickVideo, false);\n    }\n\n    if (this.options.controls) {\n      this.onKeyupEvent = e => {\n        this.onKeyup(e);\n      };\n\n      this.wrapperPlayer.addEventListener('keyup', this.onKeyupEvent, false);\n\n      this.onMousemoveEvent = e => {\n        this.onMousemove(e);\n      };\n\n      this.wrapperPlayer.addEventListener('mousemove', this.onMousemoveEvent, false);\n    } //Create fullscreen button event listener\n    //Detect fullscreen change, particulary util for esc key because state is not updated\n    //More information on MDN : https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n\n\n    this.onChangeFullScreen = e => {\n      if (!document[this.supportFullScreen.isFullScreen] && this.isFullScreen) {\n        this.exitFullscreen(e.target);\n      }\n    };\n\n    window.addEventListener(this.supportFullScreen.changeEvent, this.onChangeFullScreen, false);\n  }\n\n  playerIsReady() {\n    this.loading(false);\n\n    if (typeof this.callback === 'function') {\n      this.callback(this);\n    } //If player has autoplay option, play now\n\n\n    if (this.options.autoplay) {\n      this.togglePlayPause();\n    }\n  }\n\n  loading(state) {\n    if (state) {\n      this.wrapperPlayer.classList.add('vl-loading');\n    } else {\n      this.wrapperPlayer.classList.remove('vl-loading');\n    }\n  }\n\n  updateDuration() {\n    this.wrapperPlayer.querySelector('.vl-duration').innerHTML = this.constructor.formatVideoTime(this.getDuration());\n  }\n\n  onVideoEnded() {\n    this.wrapperPlayer.classList.replace('vl-playing', 'vl-paused');\n    this.wrapperPlayer.classList.add('vl-first-start');\n    this.wrapperPlayer.querySelector('.vl-poster').classList.add('vl-active');\n\n    if (this.options.constrols) {\n      this.wrapperPlayer.querySelector('.vl-progress-seek').style.width = '0%';\n      this.wrapperPlayer.querySelector('.vl-progress-input').setAttribute('value', 0);\n      this.wrapperPlayer.querySelector('.vl-current-time').innerHTML = '00:00';\n    }\n  }\n\n  togglePlayPause() {\n    if (this.wrapperPlayer.classList.contains('vl-paused')) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  }\n\n  fastForward(e) {\n    if (e.target.getAttribute('data-direction') === 'left') {\n      this.seekTo(this.getCurrentTime() - 10);\n    } else {\n      this.seekTo(this.getCurrentTime() + 10);\n    }\n  }\n\n  play() {\n    if (this.wrapperPlayer.classList.contains('vl-first-start')) {\n      this.wrapperPlayer.classList.remove('vl-first-start');\n      this.wrapperPlayer.querySelector('.vl-poster').classList.remove('vl-active');\n    }\n\n    this.methodPlay();\n    this.isPaused = false;\n    this.afterPlayPause();\n  }\n\n  pause() {\n    this.methodPause();\n    this.isPaused = true;\n    this.afterPlayPause();\n  }\n\n  afterPlayPause() {\n    if (this.isPaused) {\n      this.wrapperPlayer.classList.replace('vl-playing', 'vl-paused');\n    } else {\n      this.wrapperPlayer.classList.replace('vl-paused', 'vl-playing');\n    }\n\n    if (this.options.autoHide && this.options.controls) {\n      if (this.isPaused) {\n        this.wrapperPlayer.querySelector('.vl-control-bar').classList.remove('hidden');\n      } else {\n        this.timerAutoHide = setTimeout(() => {\n          this.wrapperPlayer.querySelector('.vl-control-bar').classList.add('hidden');\n        }, DELAY_AUTO_HIDE);\n      }\n    }\n  } //Toggle volume on the video\n\n\n  toggleVolume() {\n    let volumeButton = this.wrapperPlayer.querySelector('.vl-volume');\n\n    if (volumeButton.classList.contains('vl-muted')) {\n      this.unMute();\n    } else {\n      this.mute();\n    }\n  }\n\n  mute() {\n    this.methodMute();\n    this.wrapperPlayer.querySelector('.vl-volume').classList.add('vl-muted');\n  }\n\n  unMute() {\n    this.methodUnMute();\n    this.wrapperPlayer.querySelector('.vl-volume').classList.remove('vl-muted');\n  }\n\n  seekTo(newTime) {\n    this.setCurrentTime(newTime);\n  }\n\n  toggleFullscreen() {\n    if (this.isFullScreen) {\n      this.exitFullscreen();\n    } else {\n      this.requestFullscreen();\n    }\n  } //Check fullscreen support API on different browsers and cached prefixs\n\n\n  static checkSupportFullScreen() {\n    let prefixs = ['', 'moz', 'webkit', 'ms', 'o'],\n        lengthPrefixs = prefixs.length,\n        fullscreen,\n        requestFn,\n        cancelFn,\n        changeEvent,\n        isFullScreen;\n\n    if (document.cancelFullscreen !== undefined) {\n      requestFn = 'requestFullscreen';\n      cancelFn = 'exitFullscreen';\n      changeEvent = 'fullscreenchange';\n    } else {\n      while (lengthPrefixs--) {\n        if ((prefixs[lengthPrefixs] !== 'moz' || document.mozFullScreenEnabled) && document[prefixs[lengthPrefixs] + 'CancelFullScreen'] !== undefined) {\n          requestFn = prefixs[lengthPrefixs] + 'RequestFullScreen';\n          cancelFn = prefixs[lengthPrefixs] + 'CancelFullScreen';\n          changeEvent = prefixs[lengthPrefixs] + 'fullscreenchange';\n          isFullScreen = prefixs[lengthPrefixs] === 'webkit' ? prefixs[lengthPrefixs] + 'IsFullScreen' : prefixs[lengthPrefixs] + 'FullScreen';\n        }\n      }\n    }\n\n    fullscreen = {\n      requestFn: requestFn,\n      cancelFn: cancelFn,\n      changeEvent: changeEvent,\n      isFullScreen: isFullScreen\n    };\n    return requestFn ? fullscreen : false;\n  } //Request fullscreen after user action\n\n\n  requestFullscreen() {\n    let {\n      requestFn\n    } = this.supportFullScreen;\n\n    if (this.player[requestFn]) {\n      //Request fullscreen on parentNode player, to display custom controls\n      this.player.parentNode[requestFn]();\n      this.isFullScreen = true;\n      this.wrapperPlayer.classList.add('vl-fullscreen-display');\n      this.wrapperPlayer.querySelector('.vl-fullscreen').classList.add('vl-exit');\n    }\n  } //Exit fullscreen after user action\n\n\n  exitFullscreen() {\n    let {\n      cancelFn\n    } = this.supportFullScreen;\n\n    if (document[cancelFn]) {\n      document[cancelFn]();\n      this.wrapperPlayer.classList.remove('vl-fullscreen-display');\n      this.wrapperPlayer.querySelector('.vl-fullscreen').classList.remove('vl-exit');\n      this.isFullScreen = false;\n    }\n  }\n\n  onKeyup(e) {\n    //Toggle play pause the video on spacebar press\n    if (e.keyCode === 32) {\n      this.togglePlayPause();\n    }\n  }\n\n  onMousemove(e) {\n    if (this.isPaused === false && this.options.autoHide && this.options.controls) {\n      this.wrapperPlayer.querySelector('.vl-control-bar').classList.remove('hidden');\n      clearTimeout(this.timerAutoHide);\n      this.timerAutoHide = setTimeout(() => {\n        this.wrapperPlayer.querySelector('.vl-control-bar').classList.add('hidden');\n      }, DELAY_AUTO_HIDE);\n    }\n  } //Update current time displaying in the control bar and the width of the progress bar\n\n\n  updateCurrentTime() {\n    let currentTime = Math.round(this.getCurrentTime()),\n        duration = this.getDuration(),\n        width = currentTime * 100 / duration,\n        timeElement = this.wrapperPlayer.querySelector('.vl-current-time');\n    this.wrapperPlayer.querySelector('.vl-progress-seek').style.width = width + '%';\n\n    if (timeElement !== null) {\n      timeElement.innerHTML = this.constructor.formatVideoTime(currentTime);\n    }\n  }\n\n  unBindEvents() {\n    [].forEach.call(this.wrapperPlayer.querySelectorAll('.vl-toggle-play-pause-js'), button => {\n      button.removeEventListener('click', this.onClickTogglePlayPause);\n    });\n    this.onClickTogglePlayPause = null;\n\n    if (!this.touchSupport) {\n      [].forEach.call(this.wrapperPlayer.querySelectorAll('.vl-fast-forward-js'), button => {\n        button.removeEventListener('dblclick', this.onDblclickFastForward);\n      });\n      this.onDblclickFastForward = null;\n    }\n\n    if (this.options.controls && this.options.timeline) {\n      this.wrapperPlayer.querySelector('.vl-progress-input').removeEventListener('change', this.onChangeProgressBar, false);\n      this.onChangeProgressBar = null;\n    }\n\n    if (this.options.controls && this.options.volume) {\n      this.wrapperPlayer.querySelector('.vl-volume').removeEventListener('click', this.onCLickToggleVolume);\n      this.onCLickToggleVolume = null;\n    }\n\n    if (this.options.controls) {\n      this.wrapperPlayer.removeEventListener('keyup', this.onKeyupEvent);\n      this.wrapperPlayer.removeEventListener('mousemove', this.onMousemoveEvent);\n      this.onKeyupEvent = null;\n      this.onMousemoveEvent = null;\n    }\n\n    if (this.options.controls && this.options.fullscreen) {\n      this.wrapperPlayer.querySelector('.vl-fullscreen').removeEventListener('click', this.onClickToggleFullscreen);\n      this.wrapperPlayer.querySelector('.vl-overlay-video').removeEventListener('dblclick', this.onDblclickVideo);\n      this.onClickToggleFullscreen = null;\n      this.onDblclickVideo = null;\n    }\n\n    window.removeEventListener(this.supportFullScreen.changeEvent, this.onChangeFullScreen);\n  }\n\n  destroy() {\n    this.pause();\n    this.unBindEvents();\n\n    if (typeof this.unBindSpecificEvents === 'function') {\n      this.unBindSpecificEvents();\n    }\n\n    if (typeof this.removeInstance === 'function') {\n      this.removeInstance();\n    }\n\n    this.wrapperPlayer.remove();\n  } //Convert video time second to 00:00 display\n\n\n  static formatVideoTime(time) {\n    let ms = time * 1000,\n        min = ms / 1000 / 60 << 0,\n        sec = ms / 1000 % 60 << 0,\n        timeInString = '';\n    timeInString += min < 10 ? '0' : '';\n    timeInString += min + ':';\n    timeInString += sec < 10 ? '0' : '';\n    timeInString += sec;\n    return timeInString;\n  } // https://gomakethings.com/vanilla-javascript-version-of-jquery-extend/\n  // Pass in the objects to merge as arguments.\n  // For a deep extend, set the first argument to `true`.\n\n\n  static extend() {\n    let extended = {};\n    let deep = false;\n    let i = 0;\n    let {\n      length\n    } = arguments; // Check if a deep merge\n\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n      deep = arguments[0];\n      i++;\n    } // Merge the object into the extended object\n\n\n    let merge = obj => {\n      for (let prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          // If deep merge and property is an object, merge properties\n          if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n            extended[prop] = this.constructor.extend(true, extended[prop], obj[prop]);\n          } else {\n            extended[prop] = obj[prop];\n          }\n        }\n      }\n    }; // Loop through each object and conduct a merge\n\n\n    for (; i < length; i++) {\n      let obj = arguments[i];\n      merge(obj);\n    }\n\n    return extended;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);\n\n//# sourceURL=webpack://vLite/./src/js/player.js?");

/***/ }),

/***/ "./src/js/vlite.js":
/*!*************************!*\
  !*** ./src/js/vlite.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_vlite_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/vlite.css */ \"./src/css/vlite.css\");\n/* harmony import */ var _css_vlite_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_vlite_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _player_youtube__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player-youtube */ \"./src/js/player-youtube.js\");\n/* harmony import */ var _player_html5__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player-html5 */ \"./src/js/player-html5.js\");\n/**\n* @license MIT\n* @name vLitejs\n* @version 2.0.1\n* @author: Yoriiis aka Joris DANIEL <joris.daniel@gmail.com>\n* @description: vLite.js is a fast and lightweight Javascript library to customize and skin native HTML5 video and Youtube video in Javascript native with a default skin\n* {@link https://vlite.bitbucket.io}\n* @copyright 2019 Joris DANIEL <https://vlite.bitbucket.io>\n**/\n\n\n\n\n\nconst _VliteYoutube = {\n  apiLoading: false,\n  apiReady: false,\n  apiReadyQueue: []\n};\n\nclass vLite {\n  constructor({\n    selector,\n    options = undefined,\n    callback\n  }) {\n    this.player = null;\n\n    if (typeof selector === 'string') {\n      this.player = document.querySelector(selector);\n    } else if (typeof selector === 'object') {\n      this.player = selector;\n    }\n\n    if (this.player === null) {\n      console.warn('[vLite] - Selector not found');\n      return;\n    }\n\n    this.options = options;\n    this.callback = callback;\n    this.initPlayer();\n  }\n\n  initPlayer() {\n    if (this.player.hasAttribute('data-youtube-id')) {\n      if (!_VliteYoutube.apiReady) {\n        if (!_VliteYoutube.apiLoading) {\n          _VliteYoutube.apiLoading = true;\n          this.loadYoutubeAPI();\n        }\n\n        _VliteYoutube.apiReadyQueue.push({\n          player: this.player,\n          options: this.options,\n          callback: this.callback\n        });\n      } else {\n        this.instancePlayer = new _player_youtube__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n          selector: this.player,\n          options: this.options,\n          callback: this.callback\n        });\n      }\n    } else {\n      this.instancePlayer = new _player_html5__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n        selector: this.player,\n        options: this.options,\n        callback: this.callback\n      });\n    }\n  }\n\n  loadYoutubeAPI() {\n    let script = document.createElement('script');\n    script.async = true;\n    script.type = 'text/javascript';\n    script.src = 'https://youtube.com/iframe_api';\n\n    window.onYouTubeIframeAPIReady = () => {\n      _VliteYoutube.apiReady = true;\n\n      _VliteYoutube.apiReadyQueue.forEach(element => {\n        this.instancePlayer = new _player_youtube__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n          selector: element.player,\n          options: element.options,\n          callback: element.callback\n        });\n      });\n\n      _VliteYoutube.apiReadyQueue = [];\n    };\n\n    document.getElementsByTagName('body')[0].appendChild(script);\n  }\n\n  destroy() {\n    this.instancePlayer.destroy();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (vLite); //Fix Babel 6 which has removes the line \"module.exports = exports['default'];\"\n// module.exports = vLite;\n\n//# sourceURL=webpack://vLite/./src/js/vlite.js?");

/***/ })

/******/ });
});